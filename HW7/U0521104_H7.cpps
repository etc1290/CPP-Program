#include<iostream> 
#include<stdlib.h>
#include<time.h> 
using namespace std;

void BubbleSort(int arr[], int size){
	for(int j = 0; j < size-1; j++){
		for(int i = 0; i < size-1; i++){
			if(arr[i+1] < arr[i]) swap(arr[i+1],arr[i]);
		}
	} 
	return;
}

void InitOrderarr(int arr[], int size){
	for(int i = 0; i < size; i++) arr[i] = i;
	return;
}

void shuffle(int arr[],int size){
	for(int i = 0; i < size/2; i++){
		int ran = rand()%size;
		swap(arr[i],arr[ran]);
	}
}

void printAll(int arr[], int size){
	for(int i = 0; i < size; i++) cout << arr[i] << " ";
	cout << endl;
}

void randomFill(int arr[], int size){
	for(int i = 0; i < size; i++){
		arr[i] = rand()%size;
	}
}


int main(){
	//Set Rendom Seed
	srand (time(NULL));
	
	int arr1[31];
	int arr1_Len = sizeof(arr1)/sizeof(arr1[0]);
	randomFill(arr1, arr1_Len);
	
	BubbleSort(arr1, arr1_Len);
	printAll(arr1, arr1_Len);
		
}

#include<iostream> 

using namespace std;

void Eratosthenes(bool prime[], int n) 
{ 
    for (int p=2; p*p<=n; p++) { 
        if (prime[p] == true) { 
            for (int i=p*2; i<=n; i += p) 
                prime[i] = false; 
        } 
    } 
  
     
} 

int main(){
	int  n = 10000;
	bool prime[n+1];
	
	for(int i = 0; i < n+1; i++){
		prime[i] = true;
	} 
	
	Eratosthenes(prime, n);
	
	for (int p=2; p<=n; p++) 
       if (prime[p]) 
          cout << p << " ";
		
}

#include<iostream> 

using namespace std;

void Eratosthenes(bool prime[], int n) 
{ 
    for (int p=2; p*p<=n; p++) { 
        if (prime[p] == true) { 
            for (int i=p*2; i<=n; i += p) 
                prime[i] = false; 
        } 
    } 
  
     
} 

int main(){
	int  n = 10000;
	bool prime[n+1];
	
	for(int i = 0; i < n+1; i++){
		prime[i] = true;
	} 
	
	Eratosthenes(prime, n);
	
	for (int p=2; p<=n; p++) 
       if (prime[p]) 
          cout << p << " ";
		
}

#include<iostream> 
#include<stdlib.h>
#include<time.h> 

using namespace std;

int dir[8][2] = {(1,2),(1,-2),(-1,2),(-1,-2),(2,1),(2,-1),(-2,1),(-2,-1)};
int count = 0;

bool isValid(int x, int y){
	if(x > 8 || y > 8 || x<0 || y<0){
		return true;
	}
	return false;
}

void knightWalk(bool (*board)[8][8], int x ,int y){
	int i = 0;
	cout << "ok";
	if(x > 8 || y > 8 || x<0 || y<0) return;
	while (i<8) {
		if(isValid(x+dir[i][0],y+dir[i][1]) && !(*board)[x+dir[i][0]][y+dir[i][1]]){
			(*board)[x+dir[i][0]][y+dir[i][1]] = true;
			cout << "(" << x <<","<< y << ") " << count << endl;
			knightWalk(board, x+dir[i][0] ,y+dir[i][1]);
			count++;
		}
		i++;
	}
	return;
}

int main(){
	srand (time(NULL));
	
	bool chessBoard[8][8];
	for(int i = 0; i < 8; i++) {
        for(int j = 0; j < 8; j++) {
            chessBoard[i][j] = false;
        }
    }
	int initX = rand()%8, initY = rand()%8;
	chessBoard[initX][initY] = true;
	knightWalk(&chessBoard, initX ,initY);
	
	return 0;
}